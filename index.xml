<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Khoa Pham</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Khoa Pham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 21 Nov 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Minimalist in design and development</title>
      <link>http://localhost:1313/blog/minimalist-in-design-and-development/</link>
      <pubDate>Sat, 21 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/minimalist-in-design-and-development/</guid>
      <description>&lt;p&gt;My website has gone through countless design iterations, not because its look
was outdated, but my sense of simplicity has changed from time to time, and I
wanted my personal website to reflect that.&lt;/p&gt;

&lt;p&gt;Unlike previous versions in which I wanted to prove my dev skills by developing a
fairly complicated website with lot of technologies under the hood, this time I rebuilt the website with a single purpose &amp;ldquo;minimalist in design and development&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;As a result, my website now becomes much more simpler, and requires only 6 - 8
requests (total ~200KB) per page load in less than a second. Moreover, I wrote
zero Javascript code in this website even though I usually write about 50,000 lines of
javascript a year.&lt;/p&gt;

&lt;p&gt;This doesn&amp;rsquo;t mean that writing less code is better, but this is a process that I will start to do from now &amp;ldquo;Just write the code that matters&amp;rdquo;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Set up Nginx with Centos</title>
      <link>http://localhost:1313/blog/set-up-nginx-with-centos/</link>
      <pubDate>Wed, 18 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/set-up-nginx-with-centos/</guid>
      <description>

&lt;p&gt;Recently I had a chance to have my hand on setting up a web server using Nginx
and Centos. The requirements were simple:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Server can serve multiple domains or subdomains.&lt;/li&gt;
&lt;li&gt;Each domain web folder is stored under different user account.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this post, I&amp;rsquo;d like to give you a walkthrough how to set up a server like
this on any private Centos server:&lt;/p&gt;

&lt;h4 id=&#34;1-first-thing-you-want-to-do-is-to-update-system:17e2dfb2d08aa3122cdd309b941e61d7&#34;&gt;1. First thing you want to do is to update system&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;$ sudo yum update
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2-install-nginx:17e2dfb2d08aa3122cdd309b941e61d7&#34;&gt;2. Install nginx&lt;/h4&gt;

&lt;p&gt;Create a yum repo for nginx at /etc/yum.repos.d/nginx.repo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo vi /etc/yum.repos.d/nginx.repo
# Add following content
[nginx]
name=nginx repo
baseurl=http://nginx.org/packages/centos/$releasever/$basearch/
gpgcheck=0
enabled=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install nginx&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo yum install nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enable nginx service&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo chkconfig nginx on
# Now you can use
# service nginx start
# service nginx stop
# service nginx restart
# service nginx status
# service nginx reload

# Now you can run
$ sudo service nginx start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Congrats! You just got your nginx set up on your Centos server.&lt;/p&gt;

&lt;h4 id=&#34;3-configure-nginx-and-setup-domains:17e2dfb2d08aa3122cdd309b941e61d7&#34;&gt;3. Configure nginx, and setup domains&lt;/h4&gt;

&lt;p&gt;Default nginx configuration file is located at: /etc/nginx/nginx.conf. From the
last line of nginx.conf is where other custom configurations are loaded. This is
where we will setup our domains or subdomains.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s setup our first domain (example.com). We create a user call example to
manage this domain.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo adduser example
$ passwd example
# Make sure to add your public key to this user so you can ssh to it

$ cd /home/example
$ mkdir public
$ vim index.html
# Add &amp;lt;h1&amp;gt;Hello world&amp;lt;/h1&amp;gt;
# If you are using su or centos account to create these files,
# do not forget to change those file &amp;amp; folder owner to example, using chmod.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we want to create a nginx config for example.com domain at
/etc/nginx/conf.d&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /ect/nginx/conf.d
$ mv default.conf example.default # disable default nginx message
$ vim example.com.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change the example.com.conf as follow&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server {

    # ipv4
    listen 80 default_server;

    # ipv6
    listen [::]:80 default_server;

    #    listen 80 default_server;
    server_name localhost example.com www.example.com;

    access_log /var/log/nginx/example.com-access.log  main;
    error_log /var/log/nginx/example.com-error.log debug;

    client_max_body_size 20m;

    location / {
        root /home/example/public/;
        index  index.html index.htm;
    }

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # deny access to .htaccess files, if Apache&#39;s document root
    # concurs with nginx&#39;s one
    #
    # location ~ /\.ht {
    #    deny  all;
    # }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;4-fix-permission-issues:17e2dfb2d08aa3122cdd309b941e61d7&#34;&gt;4. Fix permission issues&lt;/h4&gt;

&lt;p&gt;Now if everything went well, when you visit your server, you should see the 403
permission error. Calm down, this is expected. Since nginx doesn&amp;rsquo;t have access
to the user folder at /home/example/public, the server will return permission
error. We need to add nginx user to example user group.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gpasswd -a nginx example # Add nginx user to example group
$ chown -R example:example /home/example
$ chmod g+x /home/example &amp;amp;&amp;amp; chmod g+x /home/example/public
$ sudo -u nginx stat /home/example/public # make sure your all access to public
# Disable SE Linux enforce
$ setenforce 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Congrats! Now you can try to access new server using: &lt;code&gt;curl localhost&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About - Khoa Pham</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Sun, 15 Nov 2015 22:02:58 -0800</pubDate>
      
      <guid>http://localhost:1313/about/</guid>
      <description>&lt;section class=&#34;Page-about&#34;&gt;
    &lt;div class=&#34;about-inner-content wrap clearfix&#34;&gt;
        &lt;p&gt;Hi There! I&#39;m Khoa Pham, a web developer in Portland Oregon.&lt;/p&gt;
        &lt;p&gt;I&#39;m currently working at &lt;a href=&#34;http://networkredux.com&#34; target=&#34;_blank&#34;&gt;Network Redux&lt;/a&gt; on a project called &lt;a href=&#34;http://seastar.io&#34; target=&#34;_blank&#34;&gt;Seastar.io&lt;/a&gt;,
a managed Apache Cassandra Hosting. You can also find me on 
    &lt;a target=&#34;_blank&#34; href=&#34;https://twitter.com/pmkhoa&#34;&gt;Twitter&lt;/a&gt;,
    &lt;a target=&#34;_blank&#34; href=&#34;http://www.linkedin.com/in/pmkhoa&#34;&gt;Linkedin&lt;/a&gt;,
    and &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/pmkhoa&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;In the past few years, I was lucky to work with lot of talented people to finish these projects:&lt;/p&gt;
    &lt;/div&gt;

&lt;div id=&#34;home-container&#34;&gt;

&lt;div class=&#34;works-wrapper&#34;&gt;
      &lt;ul class=&#34;works&#34;&gt;
          &lt;li&gt;
            &lt;a class=&#34;project&#34; target=&#34;_blank&#34; href=&#34;http://classfare.com/&#34;&gt;
              &lt;div class=&#34;overlay-title&#34;&gt;&lt;span class=&#34;overlay-inner-text&#34;&gt;Visit Site&lt;/span&gt;&lt;/div&gt;
              &lt;img src=&#34;http://localhost:1313/img/projects/classfare.png&#34; alt=&#34;classfare&#34;&gt;
            &lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a class=&#34;project&#34; target=&#34;_blank&#34; href=&#34;http://ratiocoffee.com/&#34;&gt;
              &lt;div class=&#34;overlay-title&#34;&gt;&lt;span class=&#34;overlay-inner-text&#34;&gt;Visit Site&lt;/span&gt;&lt;/div&gt;
              &lt;img src=&#34;http://localhost:1313/img/projects/ratiocoffee.png&#34; alt=&#34;ratiocoffee&#34;&gt;
            &lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a class=&#34;project&#34; target=&#34;_blank&#34; href=&#34;http://lgintl.com/&#34;&gt;
              &lt;div class=&#34;overlay-title&#34;&gt;&lt;span class=&#34;overlay-inner-text&#34;&gt;Visit Site&lt;/span&gt;&lt;/div&gt;
              &lt;img src=&#34;http://localhost:1313/img/projects/lgintl.png&#34; alt=&#34;lgintl&#34;&gt;
            &lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a class=&#34;project&#34; target=&#34;_blank&#34; href=&#34;http://onesight.org/&#34;&gt;
              &lt;div class=&#34;overlay-title&#34;&gt;&lt;span class=&#34;overlay-inner-text&#34;&gt;Visit Site&lt;/span&gt;&lt;/div&gt;
              &lt;img src=&#34;http://localhost:1313/img/projects/onesight.png&#34; alt=&#34;onesight&#34;&gt;
            &lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a class=&#34;project&#34; target=&#34;_blank&#34; href=&#34;http://fancycontent.com/&#34;&gt;
              &lt;div class=&#34;overlay-title&#34;&gt;&lt;span class=&#34;overlay-inner-text&#34;&gt;Visit Site&lt;/span&gt;&lt;/div&gt;
              &lt;img src=&#34;http://localhost:1313/img/projects/fancy-content.png&#34; alt=&#34;fancy-content&#34;&gt;
            &lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a class=&#34;project&#34; target=&#34;_blank&#34; href=&#34;http://www.workspot.com/&#34;&gt;
              &lt;div class=&#34;overlay-title&#34;&gt;&lt;span class=&#34;overlay-inner-text&#34;&gt;Visit Site&lt;/span&gt;&lt;/div&gt;
              &lt;img src=&#34;http://localhost:1313/img/projects/workspot.png&#34; alt=&#34;workspot&#34;&gt;
            &lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a class=&#34;project&#34; target=&#34;_blank&#34; href=&#34;http://paintthemoon.net/&#34;&gt;
              &lt;div class=&#34;overlay-title&#34;&gt;&lt;span class=&#34;overlay-inner-text&#34;&gt;Visit Site&lt;/span&gt;&lt;/div&gt;
              &lt;img src=&#34;http://localhost:1313/img/projects/paintthemoon.png&#34; alt=&#34;paintthemoon&#34;&gt;
            &lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a class=&#34;project&#34; target=&#34;_blank&#34; href=&#34;http://www.empirepg.com&#34;&gt;
              &lt;div class=&#34;overlay-title&#34;&gt;&lt;span class=&#34;overlay-inner-text&#34;&gt;Visit Site&lt;/span&gt;&lt;/div&gt;
              &lt;img src=&#34;http://localhost:1313/img/projects/empirepg.png&#34; alt=&#34;empirepg&#34;&gt;
            &lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a class=&#34;project&#34; target=&#34;_blank&#34; href=&#34;http://www.40chances.com/&#34;&gt;
              &lt;div class=&#34;overlay-title&#34;&gt;&lt;span class=&#34;overlay-inner-text&#34;&gt;Visit Site&lt;/span&gt;&lt;/div&gt;
              &lt;img src=&#34;http://localhost:1313/img/projects/fortychances.png&#34; alt=&#34;fortychances&#34;&gt;
            &lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a class=&#34;project&#34; target=&#34;_blank&#34; href=&#34;http://www.pjmint.com/&#34;&gt;
              &lt;div class=&#34;overlay-title&#34;&gt;&lt;span class=&#34;overlay-inner-text&#34;&gt;Visit Site&lt;/span&gt;&lt;/div&gt;
              &lt;img src=&#34;http://localhost:1313/img/projects/pjmint.png&#34; alt=&#34;pjmint&#34;&gt;
            &lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a class=&#34;project&#34; target=&#34;_blank&#34; href=&#34;http://global.sap.com/community/ebook/2013_05_retail_analytics/index.html&#34;&gt;
              &lt;div class=&#34;overlay-title&#34;&gt;&lt;span class=&#34;overlay-inner-text&#34;&gt;Visit Site&lt;/span&gt;&lt;/div&gt;
              &lt;img src=&#34;http://localhost:1313/img/projects/sap-retail.png&#34; alt=&#34;sap-retail&#34;&gt;
            &lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a class=&#34;project&#34; target=&#34;_blank&#34; href=&#34;http://hawthornetwentysix.com/&#34;&gt;
              &lt;div class=&#34;overlay-title&#34;&gt;&lt;span class=&#34;overlay-inner-text&#34;&gt;Visit Site&lt;/span&gt;&lt;/div&gt;
              &lt;img src=&#34;http://localhost:1313/img/projects/hawthorne.png&#34; alt=&#34;hawthorne&#34;&gt;
            &lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a class=&#34;project&#34; target=&#34;_blank&#34; href=&#34;http://revmode.com/&#34;&gt;
              &lt;div class=&#34;overlay-title&#34;&gt;&lt;span class=&#34;overlay-inner-text&#34;&gt;Visit Site&lt;/span&gt;&lt;/div&gt;
              &lt;img src=&#34;http://localhost:1313/img/projects/revmode.png&#34; alt=&#34;revmode&#34;&gt;
            &lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a class=&#34;project&#34; target=&#34;_blank&#34; href=&#34;http://activeedgewellness.com/&#34;&gt;
              &lt;div class=&#34;overlay-title&#34;&gt;&lt;span class=&#34;overlay-inner-text&#34;&gt;Visit Site&lt;/span&gt;&lt;/div&gt;
              &lt;img src=&#34;http://localhost:1313/img/projects/activeedge.png&#34; alt=&#34;activeedge&#34;&gt;
            &lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a class=&#34;project&#34; target=&#34;_blank&#34; href=&#34;http://www.dearjjabrams.com/&#34;&gt;
              &lt;div class=&#34;overlay-title&#34;&gt;&lt;span class=&#34;overlay-inner-text&#34;&gt;Visit Site&lt;/span&gt;&lt;/div&gt;
              &lt;img src=&#34;http://localhost:1313/img/projects/dearjjabrams.png&#34; alt=&#34;dearjjabrams&#34;&gt;
            &lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a class=&#34;project&#34; target=&#34;_blank&#34; href=&#34;http://www.netskope.com/&#34;&gt;
              &lt;div class=&#34;overlay-title&#34;&gt;&lt;span class=&#34;overlay-inner-text&#34;&gt;Visit Site&lt;/span&gt;&lt;/div&gt;
              &lt;img src=&#34;http://localhost:1313/img/projects/netskope.png&#34; alt=&#34;netskope&#34;&gt;
            &lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a class=&#34;project&#34; target=&#34;_blank&#34; href=&#34;http://needemproductions.com/&#34;&gt;
              &lt;div class=&#34;overlay-title&#34;&gt;&lt;span class=&#34;overlay-inner-text&#34;&gt;Visit Site&lt;/span&gt;&lt;/div&gt;
              &lt;img src=&#34;http://localhost:1313/img/projects/needemproduction.png&#34; alt=&#34;needemproduction&#34;&gt;
            &lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a class=&#34;project&#34; target=&#34;_blank&#34; href=&#34;http://www.edimporters.com/&#34;&gt;
              &lt;div class=&#34;overlay-title&#34;&gt;&lt;span class=&#34;overlay-inner-text&#34;&gt;Visit Site&lt;/span&gt;&lt;/div&gt;
              &lt;img src=&#34;http://localhost:1313/img/projects/european-design.png&#34; alt=&#34;european-design&#34;&gt;
            &lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a class=&#34;project&#34; target=&#34;_blank&#34; href=&#34;http://www.sap-retail-customer-experience.com/&#34;&gt;
              &lt;div class=&#34;overlay-title&#34;&gt;&lt;span class=&#34;overlay-inner-text&#34;&gt;Visit Site&lt;/span&gt;&lt;/div&gt;
              &lt;img src=&#34;http://localhost:1313/img/projects/sap-customer-experience.png&#34; alt=&#34;sap-customer-experience&#34;&gt;
            &lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a class=&#34;project&#34; target=&#34;_blank&#34; href=&#34;http://theladyandthesailor.com/&#34;&gt;
              &lt;div class=&#34;overlay-title&#34;&gt;&lt;span class=&#34;overlay-inner-text&#34;&gt;Visit Site&lt;/span&gt;&lt;/div&gt;
              &lt;img src=&#34;http://localhost:1313/img/projects/ladysailor.png&#34; alt=&#34;ladysailor&#34;&gt;
            &lt;/a&gt;
          &lt;/li&gt;
        &lt;li class=&#34;placeholder&#34; data-index=&#34;9&#34; style=&#34;display: inline-block;&#34;&gt; &lt;/li&gt;
        &lt;li class=&#34;placeholder&#34; data-index=&#34;9&#34; style=&#34;display: inline-block;&#34;&gt; &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>ES6 Review Part 2</title>
      <link>http://localhost:1313/blog/es6-review-part-2/</link>
      <pubDate>Mon, 20 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/es6-review-part-2/</guid>
      <description>

&lt;p&gt;This is a second review post for new ES6 features that I&amp;rsquo;d love to share. You
can find the first review here &lt;a href=&#34;http://localhost:1313/blog/es6-review-part-1/&#34;&gt;ES6 Review Part 1&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;arrows:83de84d25d18a19c71ad394c32345d1e&#34;&gt;Arrows&lt;/h3&gt;

&lt;p&gt;I have been using arrow (-&amp;gt;) and fat-arrow (=&amp;gt;) key in Coffeescript for while, and I was happy when ES6 would support arrow key (=&amp;gt;) as a short-hand of function keyword. Of course, if you’re familiar with arrow keys in Coffeescript, this feature will be similar. Here are some common use cases:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  $(“button”).on(“click”, (event) =&amp;gt; {
    runApp();
  });

  var sum = (x, y) =&amp;gt; { return x + y; };
  let x = 2;
  let y = 3;
  sum(x, y); // return 5
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;strings:83de84d25d18a19c71ad394c32345d1e&#34;&gt;Strings&lt;/h3&gt;

&lt;p&gt;ES6 provides a better way to work with Strings, such as multiline strings, or string interpolation.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  `Multiline javascript
    strings`

  `${x} + ${y} = ${sum(x, y)}`
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;better-managing-your-javascript-files-with-modules:83de84d25d18a19c71ad394c32345d1e&#34;&gt;Better managing your javascript files with modules&lt;/h3&gt;

&lt;p&gt;With ES6 Modules, it’s much easier to organize your javascript files across the app. For instance:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  // lib/utility.js
  export function sum(x, y) {
    return x + y;
  }
  // app.js
  import * as utility from “lib/utility”;
  console.log(`2 + 3 = ${utility.sum(2, 3)}`)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, there are more exciting features coming in ES6. I don’t tend to review them all, instead the one that I found myself using most of the time. To see other features, you can visit this &lt;a href=&#34;https://github.com/lukehoban/es6features#template-strings&#34;&gt;Github page&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ES6 Review Part 1</title>
      <link>http://localhost:1313/blog/es6-review-part-1/</link>
      <pubDate>Tue, 03 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/es6-review-part-1/</guid>
      <description>

&lt;p&gt;ECMAScript 6 (ES6) is the upcoming version of ECMACScript standard which is
supposed to be ready soon. There are number of significant changes in
this new standard version of Javascript. So far I can tell, this is indeed the
future of Javascript, and I love it.&lt;/p&gt;

&lt;p&gt;In this short blog, I use ES6 to demonstrate some new features of ES6 by writing
the linked list data structure.&lt;/p&gt;

&lt;div class=&#34;center&#34;&gt;&lt;img src=&#34;http://localhost:1313/img/LinkedLists-deletingnode.png&#34; alt=&#34;Linked List&#34; /&gt;&lt;/div&gt;

&lt;h3 id=&#34;classes:9647d1112a4a980bd718fcc5a37418df&#34;&gt;Classes&lt;/h3&gt;

&lt;p&gt;ES6 finally allows you to declare your object using class keyword. This is one
big step forward of Javascript.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Node {
  constructor(data, nextNode) {
    this.data = data;
    this.next = nextNode;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Class comes with the &lt;code&gt;constructor&lt;/code&gt; method. This method will execute right
after the object is initiated.&lt;/p&gt;

&lt;h3 id=&#34;better-variable-scope-with-let:9647d1112a4a980bd718fcc5a37418df&#34;&gt;Better variable scope with let&lt;/h3&gt;

&lt;p&gt;What is it wrong with &lt;code&gt;var&lt;/code&gt; keyword? Here is a short example showing what wrong
with var keyword:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function foo(flag) {
  if (flag) {
    var foobar = 2;
  }
  return foobar;
};
console.log(foo(true)); // Return 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we can see in the example above, the &lt;code&gt;foobar&lt;/code&gt; variable is declared inside the
if block, not the function scope. But it&amp;rsquo;s still working when we &lt;code&gt;return foobar&lt;/code&gt;
at the end of function.&lt;/p&gt;

&lt;p&gt;However, this is not working in ES6 with the &lt;code&gt;let&lt;/code&gt; keyword. Clearly, &lt;code&gt;let&lt;/code&gt; gives us a better way to scope the variable correctly in
Javascript.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function foo(flag) {
  if (flag) {
    let foobar = 2;
  }
  return foobar;
}
console.log(foo(true)); // Error. foobar is not defined.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the full source code of how I implemented linked list in ES6.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Node {
  constructor(data, nextNode) {
    this.data = data;
    this.next = nextNode;
  }
}
class LinkedList {
  constructor() {
    this.length = 0;
    this.head = null;
  }
  insert(data) {
    let node = new Node(data, null);
    let currentNode;
    if ( ! this.head  ) {
      this.head = node;
    }
    else {
      currentNode = this.head;
      while ( currentNode.next ) {
        currentNode = currentNode.next;
      }
      currentNode.next = node;
    }
    this.length++;
  }
  remove(index) {
    if ( index &amp;gt; -1 &amp;amp;&amp;amp; index &amp;lt; this.length ) {
      let currentNode = this.head,
          previousNode,
          i = 0;
      if ( index === 0 ) {
        this.head = currentNode.next;
      } else {
        while ( i++ &amp;lt; index ) {
          previousNode = currentNode;
          currentNode = currentNode.next;
        }
        previousNode.next = currentNode.next;
      }
      this.length--;
      return currentNode.data;
    } else {
      return null;
    }
  }

  getAt(index) {
    if ( index &amp;gt; -1 &amp;amp;&amp;amp; index &amp;lt; this.length ) {
      let currentNode = this.head,
          i = 0;
      while (i++ &amp;lt; index) {
        currentNode = currentNode.next;
      }
      return currentNode.data;
    } else {
      return null;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Tower of Hanoi</title>
      <link>http://localhost:1313/blog/tower-of-hanoi/</link>
      <pubDate>Tue, 02 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/tower-of-hanoi/</guid>
      <description>&lt;p&gt;One of my favorite childhood game was the &lt;a href=&#34;http://en.wikipedia.org/wiki/Tower_of_Hanoi&#34;&gt;Tower of Hanoi&lt;/a&gt; which I loved playing it
with my neighbor friends all the time. Also, one of my very first project in college
was implementing the tower of Hanoi in C, C++, or Java. I guess this game has sticked with
me for a very long time, so that today I decided to implement it again in my new
favorite language - Ruby. In fact, it&amp;rsquo;s simple, elegant, and easy to implement in ruby.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class TowerOfHanoi
  SRC = 0
  DST = 2
  TEMP = 1

  def initialize(disks: 4)
    @disks = disks
  end

  def run
    move(@disks, SRC, DST, TEMP)
  end

  def move(disks, src, dst, temp)
    return moveFromTo(src, dst) if disks == 1
    move(disks-1, src, temp, dst)
    moveFromTo(src, dst)
    move(disks-1, temp, dst, src)
  end

  def moveFromTo(src, dst)
    puts &amp;quot;Move from #{src} to #{dst}&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To run the program, open your terminal and try it in your irb:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ irb
require_relative &#39;TowerOfHanoi&#39;
game = TowerOfHanoi.new # or game = TowerOfHanoi.new(disks: 4)
game.run
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>MenuOnScroll - jQuery Plugin</title>
      <link>http://localhost:1313/blog/menuOnScroll-jquery-plugin/</link>
      <pubDate>Tue, 25 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/menuOnScroll-jquery-plugin/</guid>
      <description>&lt;p&gt;Today I just released menuOnScroll - jQuery plugin that automatically updates the menu
navigation when you scroll. This functionality is extremely common on the web,
especially for the single page website.
Since everyone just keeps build the similar thing over and over again, I think it&amp;rsquo;s better to create a simple plugin that will help to save our time.&lt;/p&gt;

&lt;p&gt;This plugin is the first open source (MIT) project that I&amp;rsquo;ve done, and I am
super excited about this. Writing open source code really help me to write my
code cleaner because I kept refactoring my code over and over again in order to
make it not only easy to read but also to maintain. This is very important
factor that helps me to become a better developer.&lt;/p&gt;

&lt;p&gt;I hope you will find this plugin useful in some way. Here is the &lt;a href=&#34;https://github.com/pmkhoa/jquery-menuOnScroll&#34;&gt;source
code&lt;/a&gt; if you want to check it
out.&lt;/p&gt;

&lt;p&gt;Cheers! Happy Thanksgiving!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Vim Commmon Helpful Leader</title>
      <link>http://localhost:1313/blog/vim-common-helpful-leader/</link>
      <pubDate>Wed, 12 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/vim-common-helpful-leader/</guid>
      <description>&lt;p&gt;I have really enjoyed using Vim for a month now, and I have to admit that I
love the feeling of learning new things from Vim everyday. Today I would love to
share some of my favorite Vim Leaders that I found they&amp;rsquo;re extremely helpful. You
can add these into your .vimrc file, and give it a try.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Open another file in same directory&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;map &amp;lt;Leader&amp;gt;e :e &amp;lt;C-R&amp;gt;=escape(expand(&amp;quot;%:p:h&amp;quot;),&#39; &#39;) . &#39;/&#39;&amp;lt;CR&amp;gt;
map &amp;lt;Leader&amp;gt;s :split &amp;lt;C-R&amp;gt;=escape(expand(&amp;quot;%:p:h&amp;quot;), &#39; &#39;) . &#39;/&#39;&amp;lt;CR&amp;gt;
map &amp;lt;Leader&amp;gt;v :vnew &amp;lt;C-R&amp;gt;=escape(expand(&amp;quot;%:p:h&amp;quot;), &#39; &#39;) . &#39;/&#39;&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Rename current file. This is a little bit more complex that requires us do
define a helper function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function! RenameFile()
    let old_name = expand(&#39;%&#39;)
    let new_name = input(&#39;New file name: &#39;, expand(&#39;%&#39;), &#39;file&#39;)
    if new_name != &#39;&#39; &amp;amp;&amp;amp; new_name != old_name
        exec &#39;:saveas &#39; . new_name
        exec &#39;:silent !rm &#39; . old_name
        redraw!
    endif
endfunction
map &amp;lt;Leader&amp;gt;n :call RenameFile()&amp;lt;cr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>How I switched to vim in 2 weeks</title>
      <link>http://localhost:1313/blog/how-i-switched-to-vim-in-2-weeks/</link>
      <pubDate>Wed, 29 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/how-i-switched-to-vim-in-2-weeks/</guid>
      <description>&lt;p&gt;I have played with Vim so many times since I was in college, in fact that I
loved it every time I used it. However, I don&amp;rsquo;t think I ever spent time
long enough to get used to it. I&amp;rsquo;ve seen people dancing their fingers on the
keyboard using Vim, this made me wanted to try harder this time.
Finally I totally switched to Vim as my main text editor.&lt;/p&gt;

&lt;p&gt;Here is the timeline that I setup my goal.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Be prepared for couple unproductive days.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This means that your productivity level from go down from 100% to 10%-20%
which means you probably won&amp;rsquo;t be able to get your work done in couple of
first days. This is totally normal since you will be focusing on learning
Vim rather than focusing on anything else. With this being said, please
don&amp;rsquo;t try to learn Vim when you&amp;rsquo;re in the middle of tight deadline
project. :)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Learn the basic and the one that you use most.(3 days)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;- Try &lt;a href=&#34;http://vim-adventures.com&#34;&gt;Vim Adventures&lt;/a&gt;: this will help you get
around quickly by using h, j, k, l&lt;/li&gt;
&lt;li&gt;- Learn the most common keystrokes: insert, deleting, copy/paste, undo/redo, search/replace.&lt;/li&gt;
&lt;li&gt;- Learn how to open a file inside Vim (using :e), or open in new tab
(:tabe), how to navigate through tabs using (gt or gT).&lt;/li&gt;
&lt;li&gt;- Read this &lt;a href=&#34;https://upcase.com/vim&#34;&gt;Vim Trais&lt;/a&gt; from Thoughtbot to see where
you&amp;rsquo;re at with your skill.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Time to get more serious (4 days) - this is where most of people give up!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;- Read through Vim tutorial until split window chapter.&lt;/li&gt;
&lt;li&gt;- Install Vim plugins that help you navigate files such as NerdTree, or
CtrlP files quickly. The best dotfiles resource is from &lt;a href=&#34;https://github.com/thoughtbot/dotfiles&#34;&gt;Thoughtbot
dotfiles&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;- It&amp;rsquo;s time to learn Tmux, I found &lt;a href=&#34;https://www.youtube.com/watch?v=9jzWDr24UHQ&#34;&gt;this
video&lt;/a&gt; from Chris Hunt was
very helpful to understand some common use of tmux, and Vim plugins.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Practice makes perfect! (7 days)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;At this point, all you need to do is keep practicing, taking notes, and
learning. You will see yourself getting better everyday, and you will be
surprised how much faster you can use with your&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I hope you find this useful, and good luck!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deploy Middleman to Heroku</title>
      <link>http://localhost:1313/blog/deploy-middleman-to-heroku/</link>
      <pubDate>Tue, 14 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/deploy-middleman-to-heroku/</guid>
      <description>&lt;p&gt;Heroku is a great cloud service, it uses git for version control and deployment which is very handy for me to just update my blog in one command.
Here are some simple step that you can set it up.&lt;/p&gt;

&lt;p&gt;In your Gemfile, add puma and rake:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem &#39;puma&#39;,      &#39;~&amp;gt; 2.7&#39;
gem &#39;rake&#39;,      &#39;~&amp;gt; 10.1&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a Procfile, and add this code&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;web: bundle exec puma -p $PORT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since we&amp;rsquo;re going to tell Heroku to use our build folder under our Middlemanapp, we will use the rake task to compile our build assets. Under your root app, create: Rakefile&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace :assets do
  task :precompile do
    sh &#39;middleman build&#39;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally we need to setup a Rack server to tell Heroku to load our build folder, and its assets&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module Rack
  class TryStatic
    def initialize(app, options)
      @app = app
      @try = [&#39;&#39;, *options.delete(:try)]
      @static = ::Rack::Static.new(lambda { [404, {}, []] }, options)
    end
    def call(env)
      orig_path = env[&#39;PATH_INFO&#39;]
      found = nil
      @try.each do |path|
        resp = @static.call(env.merge!({&#39;PATH_INFO&#39; =&amp;gt; orig_path + path}))
        break if 404 != resp[0] &amp;amp;&amp;amp; found = resp
      end
      found or @app.call(env.merge!(&#39;PATH_INFO&#39; =&amp;gt; orig_path))
    end
  end
end
use Rack::Deflater
use Rack::TryStatic, :root =&amp;gt; &amp;quot;build&amp;quot;, :urls =&amp;gt; %w[/], :try =&amp;gt; [&#39;.html&#39;, &#39;index.html&#39;, &#39;/index.html&#39;]
# Run your own Rack app here or use this one to serve 404 messages:
run lambda{ |env|
  not_found_page = File.expand_path(&amp;quot;../build/404.html&amp;quot;, __FILE__)
  if File.exist?(not_found_page)
    [ 404, { &#39;Content-Type&#39;  =&amp;gt; &#39;text/html&#39;}, [File.read(not_found_page)] ]
  else
    [ 404, { &#39;Content-Type&#39;  =&amp;gt; &#39;text/html&#39; }, [&#39;404 - page not found&#39;] ]
  end
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now your site is ready to deploy to Heroku. Just create a Heroku app and add Heroku git remote link, and enjoy!&lt;/p&gt;

&lt;p&gt;P.S. Don&amp;rsquo;t forget to add the build directory to your .gitignore&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Completely setup Resque &#43; Resque Schedule and Resque Mailer</title>
      <link>http://localhost:1313/blog/completely-setup-resque-and-resque-scheduler/</link>
      <pubDate>Wed, 10 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/completely-setup-resque-and-resque-scheduler/</guid>
      <description>&lt;p&gt;When developing Rails app, there will be a chance that you will need to setup
job scheduler using Resque. In this post, I&amp;rsquo;d like to share my experience
setting up Resque schedule, and resque mailer on my recent Rails application
 &lt;a href=&#34;https://my.onesight.org/en&#34;&gt;My OneSight&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In your Gemfile, add these gems:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem &#39;resque&#39;, :require =&amp;gt; &amp;quot;resque/server&amp;quot;
gem &#39;resque_mailer&#39;
gem &#39;resque-scheduler&#39;, :require =&amp;gt; &#39;resque/scheduler/server’
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create config/resque.yml, to store redis environment.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;defaults: &amp;amp;defaults
  host: localhost
  port: 6379
  db: 6
development:
  &amp;lt;&amp;lt;: *defaults
test:
  &amp;lt;&amp;lt;: *defaults
staging:
  &amp;lt;&amp;lt;: *defaults
production:
  &amp;lt;&amp;lt;: *defaults
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create config/initializers/resque.rb to bootstrap your resque:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &#39;resque/failure/multiple&#39;
require &#39;resque/failure/redis&#39;
Resque::Failure::Multiple.classes = [Resque::Failure::Redis]
Resque::Failure.backend = Resque::Failure::Multiple
Dir[File.join(Rails.root, &#39;app&#39;, &#39;jobs&#39;, &#39;*.rb&#39;)].each { |file| require file }
config = YAML.load(File.open(&amp;quot;#{Rails.root}/config/resque.yml&amp;quot;))[Rails.env]
Resque.redis = Redis.new(host: config[&#39;host&#39;], port: config[&#39;port&#39;], db: config[&#39;db&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create AsyncMailer to send mail via resque mailer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class AsyncMailer &amp;lt; ActionMailer::Base
  include Resque::Mailer
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, replace all current ActionMailer, to AsyncMailer. Ex: mailers/communication_mailer.rb&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class CommunicationMailer&amp;lt; AsyncMailer
  ...
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create rake task for resque setup: /lib/tasks/resque.rake , and create resque-scheduler&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &amp;quot;resque/tasks&amp;quot;
require &#39;resque/scheduler/tasks&#39;

task &amp;quot;resque:setup&amp;quot; =&amp;gt; :environment do
  require &#39;resque&#39;
  require &#39;resque-scheduler&#39;
  Resque.schedule = YAML.load_file(Rails.root.join &#39;config&#39;, &#39;resque_schedule.yml&#39;)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a resque scheduler jobs /config/resque_schedule.yml:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;complete_profile_reminder:
  every: 30s
  class: MyJob
  queue: user_notifications
  args:
  description: Runs the perform method in MyJob
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The MyJob class is defined under: /app/controllers/jobs&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class MyJob
  def self.perform
    # Do anything here
    puts &amp;quot;Email user to complete their profile&amp;quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Route resque-web interface inside Rails.
Since we already required &amp;ldquo;resque/server”, and &amp;lsquo;resque/scheduler/server’, in our Gemfile. We can just route the resque inside our routes.rb&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mount Resque::Server.new =&amp;gt; &#39;/resque’
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bonus: Setup Procfile to use foreman to start rails server and resque. Create your Procfile as follow:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;web: bundle exec unicorn -p $PORT -c ./config/unicorn.rb
redis: redis-server
worker: env TERM_CHILD=1 QUEUES=* bundle exec rake resque:work
scheduler: bundle exec rake resque:scheduler
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/resque/resque&#34;&gt;Resque&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/resque/resque-scheduler&#34;&gt;Resque Scheduler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zapnap/resque_mailer&#34;&gt;Resque Mailer&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Create App With Meteor</title>
      <link>http://localhost:1313/blog/create-app-with-meteor/</link>
      <pubDate>Wed, 16 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/create-app-with-meteor/</guid>
      <description>&lt;p&gt;When I started to build the DearJJAbrams.com site, I came across a very simple functionality which was the realtime counter. This realtime counter worked as follow, when the user submitted their email, the counter would increase 1. However, this counter had to automatically update and synchronize with the server whenever anyone around the world submit their email, in other words, I had to create real time app with Meteor.&lt;/p&gt;

&lt;p&gt;At this point, things were getting little more complicated. The big question was how could the browser know when the database was updated in order to get synchronized? But, I was lucky to found out that &lt;a href=&#34;http://www.meteor.com&#34;&gt;Meteor&lt;/a&gt; was a perfect tool for this simple counter app.&lt;/p&gt;

&lt;p&gt;In this article, I would like to share my little experience to create app with Meteor. You can see live example here at: &lt;a href=&#34;http://simple-counter.meteor.com&#34;&gt;http://simple-counter.meteor.com&lt;/a&gt;.
The source code available at my &lt;a href=&#34;https://github.com/khoap/simple-counter&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Firstly, setting up Meteor app:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Install and set up a Meteor app is extremely easy, you can follow the quick start from Meteor to setup you first app. &lt;a href=&#34;http://docs.meteor.com&#34;&gt;Meteor Documentation8&lt;/a&gt;
If you prefer to use the &lt;a href=&#34;http://oortcloud.github.io/meteorite/&#34;&gt;meteorite&lt;/a&gt; to initially create Meteor app, you can install Meteorite using following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm install -g meteorite
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then create a Meteor app by using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mrt create counter-app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2. Structure Meteor app.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When creating meteor app, you will have a simple structure of your app. However, you may want to re-organize things around to make things easier to work with.
Here is an example of my meteor app structure:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;counter-app
  client/
      lib/
      stylesheet/
      simple-counter.js
  public/
      fonts/
      images/
  server/
      simple-counter.js
  index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see more about the app structure from &lt;a href=&#34;http://docs.meteor.com&#34;&gt;meteor documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. On the client side.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We display the counter value queried from the database, and handle the input event that people submit their email. Moreover, we want to create a publish &amp;amp; subscribe relationship between the Meteor server &amp;amp; client for the Counts documents in database.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Declare the Counts documents to hold the subscription from the server.
Counts = new Meteor.Collection(&amp;quot;counts&amp;quot;);
Meteor.subscribe(&amp;quot;counts&amp;quot;);
// Output the counter value to the handlebar template.
Template.CounterWrapper.CounterValue = function () {
  if (Counts.findOne()) {
    return Counts.findOne().countValue;
  }
};
// Handle the submit button event. If the email is correct, then call function on server side.
// submitEmail, passing a param: email.
Template.bodyContainer.events({
  &#39;click .submit-counter&#39; : function () {
    var emailReg = /^([\w-\.]+@([\w-]+\.)+[\w-]{2,4})?$/;
    var email = $(&amp;quot;#email&amp;quot;).val();
    if ( (email != &amp;quot;&amp;quot;) &amp;amp;amp;&amp;amp;amp; (emailReg.test(email)) ) {
      Meteor.call(&#39;submitEmail&#39;, email, function(error) {
        if (error) {
          $(&amp;quot;.notice-email-duplicate-input&amp;quot;).fadeIn(600);
        }
        else {
          $(&amp;quot;.notice-empty-input&amp;quot;).fadeOut(500);
          $(&amp;quot;.notice-email-duplicate-input&amp;quot;).fadeOut(600);
        }
      });
    }
    else {
      $(&amp;quot;.notice-empty-input&amp;quot;).fadeIn(600);
    }
    return false;
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;4. On the server side.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We will define the method &amp;lsquo;submitEmail&amp;rsquo; that is called in the client side to insert the email into the database.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// We have two documents to handle the emails &amp;amp;amp; counter values. Emails will be kept privately.
Emails = new Meteor.Collection(&amp;quot;emails&amp;quot;);
Counts = new Meteor.Collection(&amp;quot;counts&amp;quot;);
// Set up publish to the client.
Meteor.publish(&amp;quot;counts&amp;quot;, function() {
  return Counts.find({});
});

// When Meteor startup, we want to make sure that the counts is matched with the current number of emails in Email documents.
Meteor.startup(function () {
  if (Counts.find().count() === 0) {
    Counts.insert({name: &#39;counter&#39;, countValue: Emails.find().count()});
  }
});

// Declare Meteor method, to input the email into database.
Meteor.methods({
  submitEmail: function (email) {
    var currentCount = Counts.findOne();
    if (Emails.find({email : email}).count() &amp;amp;gt;= 1) {
      throw new Meteor.Error(404, &amp;quot;error&amp;quot;);
    }
    else {
      Counts.update({_id: currentCount._id}, {$inc: {countValue: 1}});
      var user_id = Emails.insert({email: email});
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;5. Deploying the app.&lt;/strong&gt;
Now it&amp;rsquo;s time to deploy the app, I used the Heroku server to deploy the DearJJAbrams.com site, but in this simple app, I just use the Meteor server. Since it&amp;rsquo;s very easy &amp;amp; free:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ meteor deploy myapp.meteor.com
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Inspiration videos from Steve Jobs</title>
      <link>http://localhost:1313/blog/inspiration-video-from-steve-jobs/</link>
      <pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/inspiration-video-from-steve-jobs/</guid>
      <description>&lt;div class=&#34;videoWrapper&#34;&gt;
    &lt;iframe src=&#34;https://www.youtube.com/embed/KuNQgln6TL0?feature=player_embedded&#34; height=&#34;360&#34; width=&#34;640&#34; allowfullscreen=&#34;&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;div class=&#34;videoWrapper&#34;&gt;
    &lt;iframe height=&#34;360&#34; width=&#34;640&#34; src=&#34;https://www.youtube.com/embed/FF-tKLISfPE&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Middleman Localization</title>
      <link>http://localhost:1313/blog/middleman-localization/</link>
      <pubDate>Wed, 05 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/middleman-localization/</guid>
      <description>&lt;p&gt;Recently when developing a site using middleman, my client wonder that if we can do localization for the website. Fortunately, Middleman comes with the localization extension i18n which is pretty simple to integrate it into the site.&lt;/p&gt;

&lt;p&gt;Although there&amp;rsquo;s a quick overview of Middleman Localization available on the &lt;a href=&#34;http://middlemanapp.com/&#34; target=&#34;_blank&#34;&gt;middlemanapp.com&lt;/a&gt;, I still find it a little bit confused for Middleman beginners. Here are quick steps how to set it up:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Activate i18n and update your bundle.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To activate, going to your config.rb file, then add at the end of file.
&lt;pre&gt;activate :i18n&lt;/pre&gt;
Open terminal and direct to your middleman app, then run.
&lt;pre&gt;$ bundle update&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Organize your middleman folders so that it knows where translated files located.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All the translated files should be located inside &amp;ldquo;locales&amp;rdquo; folders, in your root directory of your source code. For example, the structure of my directory:
&lt;pre&gt;source
build
config.rb
Gemfile
Gemfile.lock
locales&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Then you need to put all your template files in one folder called localizable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #d4d4d4;&#34; alt=&#34;Localizable&#34; src=&#34;http://localhost:1313/img/Localizable-1024x337.png&#34; width=&#34;1024&#34; height=&#34;337&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Add translation text into your translated files:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to your &amp;ldquo;locales&amp;rdquo; folder, and create files called: en.yml, and es.yml, these will include all translation text of English and Spanish for your site.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, in my en.yml file, it contains:
&lt;pre&gt;&amp;mdash;
en:
  siteName: &amp;ldquo;Khoa Pham&amp;rdquo;
  footer:
    privacy: &amp;ldquo;Privacy&amp;rdquo;
    legal_disclosure: &amp;ldquo;Legal Disclosure&amp;rdquo;
    terms_of_use: &amp;ldquo;Terms of Use&amp;rdquo;
    copyright: &amp;ldquo;Copyright&amp;rdquo;&lt;/pre&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In my es.yml, it contains:
&lt;pre&gt;&amp;mdash;
en:
  siteName: &amp;ldquo;Khoa Pham&amp;rdquo;
  footer:
    privacy: &amp;ldquo;Privacidad&amp;rdquo;
    legal_disclosure: &amp;ldquo;Aviso legal&amp;rdquo;
    terms_of_use: &amp;ldquo;Términos de uso&amp;rdquo;
    copyright: &amp;ldquo;Copyright&amp;rdquo;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;4. Output translation text to your template files.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Since you already put your template files into the localizable folders, now you can go to files in that folder and output localizable text. My site only has one template file called index.html.erb:&lt;/p&gt;

&lt;p&gt;To output translated text from the translated files, we use: &amp;lt;%= I18n.t(&amp;ldquo;your_key_here&amp;rdquo;) %&amp;gt;. For example,
&lt;pre&gt;&amp;lt;%= I18n.t(&amp;ldquo;siteName&amp;rdquo;) %&amp;gt;
&amp;lt;%= I18n.t(&amp;ldquo;footer.privacy&amp;rdquo;) %&amp;gt;
&amp;lt;%= I18n.t(&amp;ldquo;footer.legal_disclosure&amp;rdquo;) %&amp;gt;
&amp;lt;%= I18n.t(&amp;ldquo;footer.terms_of_use&amp;rdquo;) %&amp;gt;
&amp;lt;%= I18n.t(&amp;ldquo;footer.copyright&amp;rdquo;) %&amp;gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;You can view your site under Spanish by going to: &lt;a href=&#34;http://localhost:4567/es/index.html&#34;&gt;http://localhost:4567/es/index.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sync Middleman with Amazon S3</title>
      <link>http://localhost:1313/blog/sync-middleman-with-amazon-s3/</link>
      <pubDate>Mon, 27 May 2013 22:18:14 -0800</pubDate>
      
      <guid>http://localhost:1313/blog/sync-middleman-with-amazon-s3/</guid>
      <description>&lt;p&gt;One thing that I love using Middleman and Amazon S3 is that they&amp;rsquo;re a perfect combination for building and hosting a static HTML5 site.&lt;/p&gt;

&lt;p&gt;Indeed, using Middleman, you can generate an HTML5 Boilerplate in one command:
&lt;pre&gt;middleman init my_new_boilerplate_project &amp;ndash;template=html5&lt;/pre&gt;
After generate a template, you can start up your development server by using command:
&lt;pre&gt;bundle exec middleman server (or just) middleman server&lt;/pre&gt;
When you finish your site, you can build your site using command:
&lt;pre&gt;bundle exec middleman build&lt;/pre&gt;
Is it better you can sync Middleman with Amazon S3 automatically when you build your site, so that you don&amp;rsquo;t need to use any other FTP clients to upload these files manually? Yes, &lt;a href=&#34;https://github.com/karlfreeman/middleman-sync&#34;&gt;middleman s3_sync&lt;/a&gt; can do it for you:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In your Gemfile, add following lines:&lt;/strong&gt;
  &lt;pre&gt;gem &amp;lsquo;middleman-s3_sync&amp;rsquo;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In your config.rb file, activate your middleman s3 sync&lt;/strong&gt;
&lt;pre&gt;activate :s3_sync do |s3_sync|
  s3_sync.bucket                     = &amp;lsquo;your_s3_bucket_name&amp;rsquo; # The name of the S3 bucket you are targetting. This is globally unique.
  s3_sync.region                     = &amp;lsquo;us-west-2&amp;rsquo;     # The AWS region for your bucket.
  s3_sync.aws_access_key_id          = &amp;lsquo;your_access_key_id&amp;rsquo;
  s3_sync.aws_secret_access_key      = &amp;lsquo;your_secret_access_key&amp;rsquo;
  s3_sync.delete                     = false # We delete stray files by default.
  s3_sync.after_build                = false # We chain after the build step by default. This may not be your desired behavior&amp;hellip;
  s3_sync.prefer_gzip                = true
  s3_sync.path_style                 = true
  s3_sync.reduced_redundancy_storage = false
  s3_sync.acl                        = &amp;lsquo;public-read&amp;rsquo;
  s3_sync.encryption                 = false
end&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Make sure you install all the necessary gems to your app.&lt;/strong&gt;
&lt;pre&gt; bundle install&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;Now you can sync your files to S3 using:
&lt;pre&gt; middleman sync_s3&lt;/pre&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>