<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Khoa Pham </title>
        <link>http://khoapham.me/tags/middleman/</link>
        <language>en-us</language>
        <author>Khoa Pham</author>
        <rights>(C) 2016</rights>
        <updated>2013-06-05 00:00:00 &#43;0000 UTC</updated>

        
            
            <item>
                <title>Middleman Localization</title>
                <link>http://khoapham.me/blog/middleman-localization/</link>
                <pubDate>Wed, 05 Jun 2013 00:00:00 UTC</pubDate>
                <guid>http://khoapham.me/blog/middleman-localization/</guid>
                <description>&lt;p&gt;Recently when developing a site using middleman, my client wonder that if we can do localization for the website. Fortunately, Middleman comes with the localization extension i18n which is pretty simple to integrate it into the site.

Although there&amp;rsquo;s a quick overview of Middleman Localization available on the &lt;a href=&#34;http://middlemanapp.com/&#34; target=&#34;_blank&#34;&gt;middlemanapp.com&lt;/a&gt;, I still find it a little bit confused for Middleman beginners. Here are quick steps how to set it up:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Activate i18n and update your bundle.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To activate, going to your config.rb file, then add at the end of file.
&lt;pre&gt;activate :i18n&lt;/pre&gt;
Open terminal and direct to your middleman app, then run.
&lt;pre&gt;$ bundle update&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Organize your middleman folders so that it knows where translated files located.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All the translated files should be located inside &amp;ldquo;locales&amp;rdquo; folders, in your root directory of your source code. For example, the structure of my directory:
&lt;pre&gt;source
build
config.rb
Gemfile
Gemfile.lock
locales&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Then you need to put all your template files in one folder called localizable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #d4d4d4;&#34; alt=&#34;Localizable&#34; src=&#34;http://khoapham.me/img/Localizable-1024x337.png&#34; width=&#34;1024&#34; height=&#34;337&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Add translation text into your translated files:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to your &amp;ldquo;locales&amp;rdquo; folder, and create files called: en.yml, and es.yml, these will include all translation text of English and Spanish for your site.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, in my en.yml file, it contains:
&lt;pre&gt;&amp;mdash;
en:
  siteName: &amp;ldquo;Khoa Pham&amp;rdquo;
  footer:
    privacy: &amp;ldquo;Privacy&amp;rdquo;
    legal_disclosure: &amp;ldquo;Legal Disclosure&amp;rdquo;
    terms_of_use: &amp;ldquo;Terms of Use&amp;rdquo;
    copyright: &amp;ldquo;Copyright&amp;rdquo;&lt;/pre&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In my es.yml, it contains:
&lt;pre&gt;&amp;mdash;
en:
  siteName: &amp;ldquo;Khoa Pham&amp;rdquo;
  footer:
    privacy: &amp;ldquo;Privacidad&amp;rdquo;
    legal_disclosure: &amp;ldquo;Aviso legal&amp;rdquo;
    terms_of_use: &amp;ldquo;Términos de uso&amp;rdquo;
    copyright: &amp;ldquo;Copyright&amp;rdquo;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;4. Output translation text to your template files.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Since you already put your template files into the localizable folders, now you can go to files in that folder and output localizable text. My site only has one template file called index.html.erb:&lt;/p&gt;

&lt;p&gt;To output translated text from the translated files, we use: &amp;lt;%= I18n.t(&amp;ldquo;your_key_here&amp;rdquo;) %&amp;gt;. For example,
&lt;pre&gt;&amp;lt;%= I18n.t(&amp;ldquo;siteName&amp;rdquo;) %&amp;gt;
&amp;lt;%= I18n.t(&amp;ldquo;footer.privacy&amp;rdquo;) %&amp;gt;
&amp;lt;%= I18n.t(&amp;ldquo;footer.legal_disclosure&amp;rdquo;) %&amp;gt;
&amp;lt;%= I18n.t(&amp;ldquo;footer.terms_of_use&amp;rdquo;) %&amp;gt;
&amp;lt;%= I18n.t(&amp;ldquo;footer.copyright&amp;rdquo;) %&amp;gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;You can view your site under Spanish by going to: &lt;a href=&#34;http://localhost:4567/es/index.html&#34;&gt;http://localhost:4567/es/index.html&lt;/a&gt;&lt;/p&gt;</description>
            </item>
            
        
            
            <item>
                <title>Sync Middleman with Amazon S3</title>
                <link>http://khoapham.me/blog/sync-middleman-with-amazon-s3/</link>
                <pubDate>Mon, 27 May 2013 22:18:14 -0800</pubDate>
                <guid>http://khoapham.me/blog/sync-middleman-with-amazon-s3/</guid>
                <description>&lt;p&gt;One thing that I love using Middleman and Amazon S3 is that they&amp;rsquo;re a perfect combination for building and hosting a static HTML5 site.&lt;br /&gt;
&lt;/p&gt;

&lt;p&gt;Indeed, using Middleman, you can generate an HTML5 Boilerplate in one command:
&lt;pre&gt;middleman init my_new_boilerplate_project &amp;ndash;template=html5&lt;/pre&gt;
After generate a template, you can start up your development server by using command:
&lt;pre&gt;bundle exec middleman server (or just) middleman server&lt;/pre&gt;
When you finish your site, you can build your site using command:
&lt;pre&gt;bundle exec middleman build&lt;/pre&gt;
Is it better you can sync Middleman with Amazon S3 automatically when you build your site, so that you don&amp;rsquo;t need to use any other FTP clients to upload these files manually? Yes, &lt;a href=&#34;https://github.com/karlfreeman/middleman-sync&#34;&gt;middleman s3_sync&lt;/a&gt; can do it for you:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In your Gemfile, add following lines:&lt;/strong&gt;
  &lt;pre&gt;gem &amp;lsquo;middleman-s3_sync&amp;rsquo;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In your config.rb file, activate your middleman s3 sync&lt;/strong&gt;
&lt;pre&gt;activate :s3_sync do |s3_sync|
  s3_sync.bucket                     = &amp;lsquo;your_s3_bucket_name&amp;rsquo; # The name of the S3 bucket you are targetting. This is globally unique.
  s3_sync.region                     = &amp;lsquo;us-west-2&amp;rsquo;     # The AWS region for your bucket.
  s3_sync.aws_access_key_id          = &amp;lsquo;your_access_key_id&amp;rsquo;
  s3_sync.aws_secret_access_key      = &amp;lsquo;your_secret_access_key&amp;rsquo;
  s3_sync.delete                     = false # We delete stray files by default.
  s3_sync.after_build                = false # We chain after the build step by default. This may not be your desired behavior&amp;hellip;
  s3_sync.prefer_gzip                = true
  s3_sync.path_style                 = true
  s3_sync.reduced_redundancy_storage = false
  s3_sync.acl                        = &amp;lsquo;public-read&amp;rsquo;
  s3_sync.encryption                 = false
end&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Make sure you install all the necessary gems to your app.&lt;/strong&gt;
&lt;pre&gt; bundle install&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;Now you can sync your files to S3 using:
&lt;pre&gt; middleman sync_s3&lt;/pre&gt;&lt;/p&gt;</description>
            </item>
            
        

    </channel>
</rss>
