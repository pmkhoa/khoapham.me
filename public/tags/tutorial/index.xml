<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Khoa Pham </title>
        <link>http://khoapham.me/tags/tutorial/index.xml</link>
        <language>en-us</language>
        <author>Khoa Pham</author>
        <rights>(C) 2016</rights>
        <updated>0001-01-01 00:00:00 &#43;0000 UTC</updated>

        
            
            <item>
                <title>Full Stack Development with Ember and Go</title>
                <link>http://khoapham.me/blog/full-stack-development-with-Ember-and-Go/</link>
                <pubDate>Mon, 27 Jun 2016 12:09:16 PDT</pubDate>
                <guid>http://khoapham.me/blog/full-stack-development-with-Ember-and-Go/</guid>
                <description>&lt;p&gt;One of my personal 2016 resolution was learning Go, and get familiar with
writing restful API using Go. After couple of months learning Go, I started a
simple application that use Go, and Ember to develop a Todo app.

Yes, you read it right, I&amp;rsquo;m also creating another Todo app. Yet this one is different from the
other you have seen because it&amp;rsquo;s built with Go for backend api, and Ember for
frontend.&lt;/p&gt;

&lt;p&gt;The source code can be found here:
&lt;a href=&#34;https://github.com/pmkhoa/restful-api-go-and-ember&#34;&gt;https://github.com/pmkhoa/restful-api-go-and-ember&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;backend-overview&#34;&gt;Backend overview&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;model&lt;/em&gt;: Todo model includes &lt;code&gt;Id&lt;/code&gt;, &lt;code&gt;Name&lt;/code&gt;, &lt;code&gt;Completed&lt;/code&gt;, &lt;code&gt;Due&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main
import &amp;quot;time&amp;quot;
type Todo struct {
    Id          string `json:&amp;quot;id&amp;quot;`
    Name        string `json:&amp;quot;name&amp;quot;`
    Completed   bool `json:&amp;quot;completed&amp;quot;`
    Due         time.Time `json:&amp;quot;due&amp;quot;`
}
type Todos []Todo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We create type Todo, and Todos to hold our Todo object, and Todo list&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;server&lt;/em&gt;: bootstrap http server, response to request made from the client.&lt;/p&gt;

&lt;p&gt;For our server code, we use &lt;code&gt;httprouter&lt;/code&gt; to for our api handler, and enable CORS
so that our frontend app can talk to the server when they&amp;rsquo;re on different
domains.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main
import (
    ... // import our dependencies here
)
func main() {
    router := httprouter.New()
    router.GET(&amp;quot;/todos&amp;quot;, TodosIndex)
    router.GET(&amp;quot;/todos/:todoId&amp;quot;, ShowTodo)
    // More routes are defined similarly

    // Enable the CORS
    c := cors.New(cors.Options{
        AllowedOrigins: []string{&amp;quot;*&amp;quot;},
        AllowedMethods: []string{&amp;quot;GET&amp;quot;, &amp;quot;POST&amp;quot;, &amp;quot;DELETE&amp;quot;, &amp;quot;PUT&amp;quot;, &amp;quot;PATCH&amp;quot;, &amp;quot;OPTIONS&amp;quot;}
    })
}

func TodosIndex(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
    w.Header().Set(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/json; charset=UTF-8&amp;quot;)
    w.WriteHeader(http.StatusOK)
    err := json.NewEncoder(w).Encode(todos)
    if err != nil {
        panic(err)
    }
}

func ShowTodo(w http.ResponseWriter, r *http.Request, params httprouter.Params) {
    todoId := params.ByName(&amp;quot;todoId&amp;quot;)
    todo := RepoFindTodo(todoId)
    w.Header().Set(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/json; charset=UTF-8&amp;quot;)
    w.WriteHeader(http.StatusOK)
    err := json.NewEncoder(w).Encode(todo)
    if err != nil {
        panic(err)
    }
}
// more handlers can be defined with other httprouter 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Data fixture&lt;/em&gt;: findTodo, updateTodo, deleteTodo, createTodo.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m using a simple data fixture to handle model operations. There will be
another blog post that integrate this application with Postgres for data
persistent.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// repo.go
package main
import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;strconv&amp;quot;
)
var currentId int // keep track of our current todo
var todos Todos
func init() {
    // When initialize the app, we will create two sample todos
    RepoCreateTodo(Todo{Name: &amp;quot;Test Todo 1&amp;quot;, Completed: false})
    RepoCreateTodo(Todo{Name: &amp;quot;Test Todo 2&amp;quot;, Complete: false})
}
func RepoCreateTodo(t Todo) Todo {
    currentId += 1
    t.Id = strconv.Itoa(currentId)
    todos = append(todos, t)
    return t
}
func RepoFindTodo(id string) Todo {
    for _, todo := range todos {
        if todo.Id == id {
            return todo
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;frontend-overview&#34;&gt;Frontend overview&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;webapp&lt;/em&gt;: Simple Ember app that lists all todos, and all user to create todo.
If you&amp;rsquo;re interested in learning Ember for building frontend. Feel free to
check out the github repo for this.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;future-development&#34;&gt;Future development&lt;/h3&gt;

&lt;p&gt;Eventhough this was a very simple app, I have learnt a lot from building it from
the ground up. Using Go for backend API is quite astonishing and simple, I think
it&amp;rsquo;s a great choice for anyone who is looking for a fast, simple way to build
API. There are a lot of things the can improve from this app.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Write README&lt;/li&gt;
&lt;li&gt;Better handling errors for both backend &amp;amp; frontend&lt;/li&gt;
&lt;li&gt;Write integration test &amp;amp; unit tests&lt;/li&gt;
&lt;li&gt;Use Postgres for data persistent.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you&amp;rsquo;re interested in all the source code, feel free to check it out here:
&lt;a href=&#34;https://github.com/pmkhoa/restful-api-go-and-ember&#34;&gt;https://github.com/pmkhoa/restful-api-go-and-ember&lt;/a&gt;&lt;/p&gt;</description>
            </item>
            
        
            
            <item>
                <title>Create App With Meteor</title>
                <link>http://khoapham.me/blog/create-app-with-meteor/</link>
                <pubDate>Wed, 16 Oct 2013 00:00:00 UTC</pubDate>
                <guid>http://khoapham.me/blog/create-app-with-meteor/</guid>
                <description>&lt;p&gt;When I started to build the DearJJAbrams.com site, I came across a very simple functionality which was the realtime counter. This realtime counter worked as follow, when the user submitted their email, the counter would increase 1. However, this counter had to automatically update and synchronize with the server whenever anyone around the world submit their email, in other words, I had to create real time app with Meteor.

At this point, things were getting little more complicated. The big question was how could the browser know when the database was updated in order to get synchronized? But, I was lucky to found out that &lt;a href=&#34;http://www.meteor.com&#34;&gt;Meteor&lt;/a&gt; was a perfect tool for this simple counter app.&lt;/p&gt;

&lt;p&gt;In this article, I would like to share my little experience to create app with Meteor. You can see live example here at: &lt;a href=&#34;http://simple-counter.meteor.com&#34;&gt;http://simple-counter.meteor.com&lt;/a&gt;.
The source code available at my &lt;a href=&#34;https://github.com/khoap/simple-counter&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Firstly, setting up Meteor app:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Install and set up a Meteor app is extremely easy, you can follow the quick start from Meteor to setup you first app. &lt;a href=&#34;http://docs.meteor.com&#34;&gt;Meteor Documentation8&lt;/a&gt;
If you prefer to use theÂ &lt;a href=&#34;http://oortcloud.github.io/meteorite/&#34;&gt;meteorite&lt;/a&gt; to initially create Meteor app, you can install Meteorite using following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm install -g meteorite
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then create a Meteor app by using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mrt create counter-app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2. Structure Meteor app.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When creating meteor app, you will have a simple structure of your app. However, you may want to re-organize things around to make things easier to work with.
Here is an example of my meteor app structure:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;counter-app
  client/
      lib/
      stylesheet/
      simple-counter.js
  public/
      fonts/
      images/
  server/
      simple-counter.js
  index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see more about the app structure from &lt;a href=&#34;http://docs.meteor.com&#34;&gt;meteor documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. On the client side.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We display the counter value queried from the database, and handle the input event that people submit their email. Moreover, we want to create a publish &amp;amp; subscribe relationship between the Meteor server &amp;amp; client for the Counts documents in database.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Declare the Counts documents to hold the subscription from the server.
Counts = new Meteor.Collection(&amp;quot;counts&amp;quot;);
Meteor.subscribe(&amp;quot;counts&amp;quot;);
// Output the counter value to the handlebar template.
Template.CounterWrapper.CounterValue = function () {
  if (Counts.findOne()) {
    return Counts.findOne().countValue;
  }
};
// Handle the submit button event. If the email is correct, then call function on server side.
// submitEmail, passing a param: email.
Template.bodyContainer.events({
  &#39;click .submit-counter&#39; : function () {
    var emailReg = /^([\w-\.]+@([\w-]+\.)+[\w-]{2,4})?$/;
    var email = $(&amp;quot;#email&amp;quot;).val();
    if ( (email != &amp;quot;&amp;quot;) &amp;amp;amp;&amp;amp;amp; (emailReg.test(email)) ) {
      Meteor.call(&#39;submitEmail&#39;, email, function(error) {
        if (error) {
          $(&amp;quot;.notice-email-duplicate-input&amp;quot;).fadeIn(600);
        }
        else {
          $(&amp;quot;.notice-empty-input&amp;quot;).fadeOut(500);
          $(&amp;quot;.notice-email-duplicate-input&amp;quot;).fadeOut(600);
        }
      });
    }
    else {
      $(&amp;quot;.notice-empty-input&amp;quot;).fadeIn(600);
    }
    return false;
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;4. On the server side.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We will define the method &amp;lsquo;submitEmail&amp;rsquo; that is called in the client side to insert the email into the database.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// We have two documents to handle the emails &amp;amp;amp; counter values. Emails will be kept privately.
Emails = new Meteor.Collection(&amp;quot;emails&amp;quot;);
Counts = new Meteor.Collection(&amp;quot;counts&amp;quot;);
// Set up publish to the client.
Meteor.publish(&amp;quot;counts&amp;quot;, function() {
  return Counts.find({});
});

// When Meteor startup, we want to make sure that the counts is matched with the current number of emails in Email documents.
Meteor.startup(function () {
  if (Counts.find().count() === 0) {
    Counts.insert({name: &#39;counter&#39;, countValue: Emails.find().count()});
  }
});

// Declare Meteor method, to input the email into database.
Meteor.methods({
  submitEmail: function (email) {
    var currentCount = Counts.findOne();
    if (Emails.find({email : email}).count() &amp;amp;gt;= 1) {
      throw new Meteor.Error(404, &amp;quot;error&amp;quot;);
    }
    else {
      Counts.update({_id: currentCount._id}, {$inc: {countValue: 1}});
      var user_id = Emails.insert({email: email});
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;5. Deploying the app.&lt;/strong&gt;
Now it&amp;rsquo;s time to deploy the app, I used the Heroku server to deploy the DearJJAbrams.com site, but in this simple app, I just use the Meteor server. Since it&amp;rsquo;s very easy &amp;amp; free:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ meteor deploy myapp.meteor.com
&lt;/code&gt;&lt;/pre&gt;</description>
            </item>
            
        

    </channel>
</rss>
