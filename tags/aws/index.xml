<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Khoa Pham </title>
        <link>http://khoapham.me/tags/aws/index.xml</link>
        <language>en-us</language>
        <author>Khoa Pham</author>
        <rights>(C) 2016</rights>
        <updated>0001-01-01 00:00:00 &#43;0000 UTC</updated>

        
            
            <item>
                <title>Sync Middleman with Amazon S3</title>
                <link>http://khoapham.me/blog/sync-middleman-with-amazon-s3/</link>
                <pubDate>Mon, 27 May 2013 22:18:14 -0800</pubDate>
                <guid>http://khoapham.me/blog/sync-middleman-with-amazon-s3/</guid>
                <description>&lt;p&gt;One thing that I love using Middleman and Amazon S3 is that they&amp;rsquo;re a perfect combination for building and hosting a static HTML5 site.&lt;br /&gt;
&lt;/p&gt;

&lt;p&gt;Indeed, using Middleman, you can generate an HTML5 Boilerplate in one command:
&lt;pre&gt;middleman init my_new_boilerplate_project &amp;ndash;template=html5&lt;/pre&gt;
After generate a template, you can start up your development server by using command:
&lt;pre&gt;bundle exec middleman server (or just) middleman server&lt;/pre&gt;
When you finish your site, you can build your site using command:
&lt;pre&gt;bundle exec middleman build&lt;/pre&gt;
Is it better you can sync Middleman with Amazon S3 automatically when you build your site, so that you don&amp;rsquo;t need to use any other FTP clients to upload these files manually? Yes, &lt;a href=&#34;https://github.com/karlfreeman/middleman-sync&#34;&gt;middleman s3_sync&lt;/a&gt; can do it for you:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In your Gemfile, add following lines:&lt;/strong&gt;
  &lt;pre&gt;gem &amp;lsquo;middleman-s3_sync&amp;rsquo;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In your config.rb file, activate your middleman s3 sync&lt;/strong&gt;
&lt;pre&gt;activate :s3_sync do |s3_sync|
  s3_sync.bucket                     = &amp;lsquo;your_s3_bucket_name&amp;rsquo; # The name of the S3 bucket you are targetting. This is globally unique.
  s3_sync.region                     = &amp;lsquo;us-west-2&amp;rsquo;     # The AWS region for your bucket.
  s3_sync.aws_access_key_id          = &amp;lsquo;your_access_key_id&amp;rsquo;
  s3_sync.aws_secret_access_key      = &amp;lsquo;your_secret_access_key&amp;rsquo;
  s3_sync.delete                     = false # We delete stray files by default.
  s3_sync.after_build                = false # We chain after the build step by default. This may not be your desired behavior&amp;hellip;
  s3_sync.prefer_gzip                = true
  s3_sync.path_style                 = true
  s3_sync.reduced_redundancy_storage = false
  s3_sync.acl                        = &amp;lsquo;public-read&amp;rsquo;
  s3_sync.encryption                 = false
end&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Make sure you install all the necessary gems to your app.&lt;/strong&gt;
&lt;pre&gt; bundle install&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;Now you can sync your files to S3 using:
&lt;pre&gt; middleman sync_s3&lt;/pre&gt;&lt;/p&gt;</description>
            </item>
            
        
            
            <item>
                <title>Setting up Amazon Web Services</title>
                <link>http://khoapham.me/blog/setting-up-amazon-web-services/</link>
                <pubDate>Fri, 17 May 2013 23:14:51 -0800</pubDate>
                <guid>http://khoapham.me/blog/setting-up-amazon-web-services/</guid>
                <description>&lt;p&gt;To setting up Amazon Web Services, the process of setting up an EC2 on Amazon Web Services (AWS) is not complicated, all you need to get a server up and running are Apache, PHP,  MySQL.
Here are some initial steps that help you get started:
&lt;/p&gt;

&lt;p&gt;###1. SSH connect to you EC2 instance.
To connect to your instance, you need the private key and the elastic IP address that associate with your instance. You can create an associated elastic IP address right in your Amazon Console Management.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -i [FILE NAME].pem ec2-user@[IP ADDRESS]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###2. Once you&amp;rsquo;re connected, install update on your instance.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo yum -y update
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-install-php-amp-its-package&#34;&gt;3. Install PHP &amp;amp; its package.&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;sudo yum install php php-mysql php-xml php-mcrypt php-mbstring php-cli php-devel php-pdo php-pear
sudo pear install Log
sudo yum install -y pcre-devel
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-install-apache-http&#34;&gt;4. Install Apache http.&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;sudo yum install httpd
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;5-install-mysql&#34;&gt;5. Install MySQL&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;sudo yum install mysql-server mysql-devel mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;6-install-php-apc-module&#34;&gt;6. Install PHP APC module&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;sudo yum install php-pecl-apc
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;7-configure-mysql-and-php&#34;&gt;7. Configure MySQL and PHP&lt;/h3&gt;

&lt;p&gt; Before you get everything running, make sure to check the PHP and MySQL configuration files.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The PHP configuration file is php.ini, which is located under /etc/php.ini. Open the php.ini and increase memory limit to: 128M (or bigger if you wish to).&lt;/p&gt;

&lt;pre&gt;sudo vim /etc/php.ini
memory_limit = 128M&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The MySQL configuration file is my.cnf located under /etc/my.cnf. Change it to this:&lt;/p&gt;

&lt;pre&gt;[mysqld]
datadir=/var/lib/mysql
socket=/var/lib/mysql/mysql.sock

# Disabling symbolic-links is recommended to prevent assorted security risks
symbolic-links=0
# Settings user and group are ignored when systemd is used.
# If you need to run mysqld under a different user or group,
# customize your systemd unit file for mysqld according to the
# instructions in http://fedoraproject.org/wiki/Systemd
skip-external-locking
long_query_time=1
slow_query_log
slow_query_log_file=/var/log/log-slow-queries.log
log-bin=mysql-bin
server-id= 1
key_buffer_size = 256M
max_allowed_packet = 3M
table_open_cache = 64
read_buffer_size = 4M
read_rnd_buffer_size = 8M
myisam_sort_buffer_size = 16M
thread_cache_size = 8
query_cache_size= 32M
thread_concurrency = 8
[mysqld_safe]
log-error=/var/log/mysqld.log
pid-file=/var/run/mysqld/mysqld.pid
myisam_recover_options&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you have all packages installed, you can start your web server by starting mysql-server and httpd.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo service mysqld start
sudo service httpd start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Auto start mysql server, and httpd.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo /sbin/chkconfig --levels 235 mysqld on
sudo /sbin/chkconfig --levels 235 httpd on
&lt;/code&gt;&lt;/pre&gt;</description>
            </item>
            
        

    </channel>
</rss>
