<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Khoa Pham </title>
        <link>http://khoapham.me/tags/web-development/index.xml</link>
        <language>en-us</language>
        <author>Khoa Pham</author>
        <rights>(C) 2016</rights>
        <updated>0001-01-01 00:00:00 &#43;0000 UTC</updated>

        
            
            <item>
                <title>Set up Nginx with Centos</title>
                <link>http://khoapham.me/blog/set-up-nginx-with-centos/</link>
                <pubDate>Wed, 18 Nov 2015 00:00:00 UTC</pubDate>
                <guid>http://khoapham.me/blog/set-up-nginx-with-centos/</guid>
                <description>&lt;p&gt;Recently I had a chance to have my hand on setting up a web server using Nginx
and Centos. The requirements were simple:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Server can serve multiple domains or subdomains.&lt;/li&gt;
&lt;li&gt;Each domain web folder is stored under different user account.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;In this post, I&amp;rsquo;d like to give you a walkthrough how to set up a server like
this on any private Centos server:&lt;/p&gt;

&lt;h4 id=&#34;1-first-thing-you-want-to-do-is-to-update-system&#34;&gt;1. First thing you want to do is to update system&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;$ sudo yum update
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2-install-nginx&#34;&gt;2. Install nginx&lt;/h4&gt;

&lt;p&gt;Create a yum repo for nginx at /etc/yum.repos.d/nginx.repo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo vi /etc/yum.repos.d/nginx.repo
# Add following content
[nginx]
name=nginx repo
baseurl=http://nginx.org/packages/centos/$releasever/$basearch/
gpgcheck=0
enabled=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install nginx&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo yum install nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enable nginx service&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo chkconfig nginx on
# Now you can use
# service nginx start
# service nginx stop
# service nginx restart
# service nginx status
# service nginx reload

# Now you can run
$ sudo service nginx start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Congrats! You just got your nginx set up on your Centos server.&lt;/p&gt;

&lt;h4 id=&#34;3-configure-nginx-and-setup-domains&#34;&gt;3. Configure nginx, and setup domains&lt;/h4&gt;

&lt;p&gt;Default nginx configuration file is located at: /etc/nginx/nginx.conf. From the
last line of nginx.conf is where other custom configurations are loaded. This is
where we will setup our domains or subdomains.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s setup our first domain (example.com). We create a user call example to
manage this domain.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo adduser example
$ passwd example
# Make sure to add your public key to this user so you can ssh to it

$ cd /home/example
$ mkdir public
$ vim index.html
# Add &amp;lt;h1&amp;gt;Hello world&amp;lt;/h1&amp;gt;
# If you are using su or centos account to create these files,
# do not forget to change those file &amp;amp; folder owner to example, using chmod.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we want to create a nginx config for example.com domain at
/etc/nginx/conf.d&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /ect/nginx/conf.d
$ mv default.conf example.default # disable default nginx message
$ vim example.com.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change the example.com.conf as follow&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server {

    # ipv4
    listen 80 default_server;

    # ipv6
    listen [::]:80 default_server;

    #    listen 80 default_server;
    server_name localhost example.com www.example.com;

    access_log /var/log/nginx/example.com-access.log  main;
    error_log /var/log/nginx/example.com-error.log debug;

    client_max_body_size 20m;

    location / {
        root /home/example/public/;
        index  index.html index.htm;
    }

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # deny access to .htaccess files, if Apache&#39;s document root
    # concurs with nginx&#39;s one
    #
    # location ~ /\.ht {
    #    deny  all;
    # }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;4-fix-permission-issues&#34;&gt;4. Fix permission issues&lt;/h4&gt;

&lt;p&gt;Now if everything went well, when you visit your server, you should see the 403
permission error. Calm down, this is expected. Since nginx doesn&amp;rsquo;t have access
to the user folder at /home/example/public, the server will return permission
error. We need to add nginx user to example user group.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gpasswd -a nginx example # Add nginx user to example group
$ chown -R example:example /home/example
$ chmod g+x /home/example &amp;amp;&amp;amp; chmod g+x /home/example/public
$ sudo -u nginx stat /home/example/public # make sure your all access to public
# Disable SE Linux enforce
$ setenforce 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Congrats! Now you can try to access new server using: &lt;code&gt;curl localhost&lt;/code&gt;&lt;/p&gt;</description>
            </item>
            
        
            
            <item>
                <title>Create App With Meteor</title>
                <link>http://khoapham.me/blog/create-app-with-meteor/</link>
                <pubDate>Wed, 16 Oct 2013 00:00:00 UTC</pubDate>
                <guid>http://khoapham.me/blog/create-app-with-meteor/</guid>
                <description>&lt;p&gt;When I started to build the DearJJAbrams.com site, I came across a very simple functionality which was the realtime counter. This realtime counter worked as follow, when the user submitted their email, the counter would increase 1. However, this counter had to automatically update and synchronize with the server whenever anyone around the world submit their email, in other words, I had to create real time app with Meteor.

At this point, things were getting little more complicated. The big question was how could the browser know when the database was updated in order to get synchronized? But, I was lucky to found out that &lt;a href=&#34;http://www.meteor.com&#34;&gt;Meteor&lt;/a&gt; was a perfect tool for this simple counter app.&lt;/p&gt;

&lt;p&gt;In this article, I would like to share my little experience to create app with Meteor. You can see live example here at: &lt;a href=&#34;http://simple-counter.meteor.com&#34;&gt;http://simple-counter.meteor.com&lt;/a&gt;.
The source code available at my &lt;a href=&#34;https://github.com/khoap/simple-counter&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Firstly, setting up Meteor app:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Install and set up a Meteor app is extremely easy, you can follow the quick start from Meteor to setup you first app. &lt;a href=&#34;http://docs.meteor.com&#34;&gt;Meteor Documentation8&lt;/a&gt;
If you prefer to use theÂ &lt;a href=&#34;http://oortcloud.github.io/meteorite/&#34;&gt;meteorite&lt;/a&gt; to initially create Meteor app, you can install Meteorite using following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm install -g meteorite
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then create a Meteor app by using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mrt create counter-app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2. Structure Meteor app.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When creating meteor app, you will have a simple structure of your app. However, you may want to re-organize things around to make things easier to work with.
Here is an example of my meteor app structure:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;counter-app
  client/
      lib/
      stylesheet/
      simple-counter.js
  public/
      fonts/
      images/
  server/
      simple-counter.js
  index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see more about the app structure from &lt;a href=&#34;http://docs.meteor.com&#34;&gt;meteor documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. On the client side.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We display the counter value queried from the database, and handle the input event that people submit their email. Moreover, we want to create a publish &amp;amp; subscribe relationship between the Meteor server &amp;amp; client for the Counts documents in database.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Declare the Counts documents to hold the subscription from the server.
Counts = new Meteor.Collection(&amp;quot;counts&amp;quot;);
Meteor.subscribe(&amp;quot;counts&amp;quot;);
// Output the counter value to the handlebar template.
Template.CounterWrapper.CounterValue = function () {
  if (Counts.findOne()) {
    return Counts.findOne().countValue;
  }
};
// Handle the submit button event. If the email is correct, then call function on server side.
// submitEmail, passing a param: email.
Template.bodyContainer.events({
  &#39;click .submit-counter&#39; : function () {
    var emailReg = /^([\w-\.]+@([\w-]+\.)+[\w-]{2,4})?$/;
    var email = $(&amp;quot;#email&amp;quot;).val();
    if ( (email != &amp;quot;&amp;quot;) &amp;amp;amp;&amp;amp;amp; (emailReg.test(email)) ) {
      Meteor.call(&#39;submitEmail&#39;, email, function(error) {
        if (error) {
          $(&amp;quot;.notice-email-duplicate-input&amp;quot;).fadeIn(600);
        }
        else {
          $(&amp;quot;.notice-empty-input&amp;quot;).fadeOut(500);
          $(&amp;quot;.notice-email-duplicate-input&amp;quot;).fadeOut(600);
        }
      });
    }
    else {
      $(&amp;quot;.notice-empty-input&amp;quot;).fadeIn(600);
    }
    return false;
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;4. On the server side.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We will define the method &amp;lsquo;submitEmail&amp;rsquo; that is called in the client side to insert the email into the database.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// We have two documents to handle the emails &amp;amp;amp; counter values. Emails will be kept privately.
Emails = new Meteor.Collection(&amp;quot;emails&amp;quot;);
Counts = new Meteor.Collection(&amp;quot;counts&amp;quot;);
// Set up publish to the client.
Meteor.publish(&amp;quot;counts&amp;quot;, function() {
  return Counts.find({});
});

// When Meteor startup, we want to make sure that the counts is matched with the current number of emails in Email documents.
Meteor.startup(function () {
  if (Counts.find().count() === 0) {
    Counts.insert({name: &#39;counter&#39;, countValue: Emails.find().count()});
  }
});

// Declare Meteor method, to input the email into database.
Meteor.methods({
  submitEmail: function (email) {
    var currentCount = Counts.findOne();
    if (Emails.find({email : email}).count() &amp;amp;gt;= 1) {
      throw new Meteor.Error(404, &amp;quot;error&amp;quot;);
    }
    else {
      Counts.update({_id: currentCount._id}, {$inc: {countValue: 1}});
      var user_id = Emails.insert({email: email});
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;5. Deploying the app.&lt;/strong&gt;
Now it&amp;rsquo;s time to deploy the app, I used the Heroku server to deploy the DearJJAbrams.com site, but in this simple app, I just use the Meteor server. Since it&amp;rsquo;s very easy &amp;amp; free:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ meteor deploy myapp.meteor.com
&lt;/code&gt;&lt;/pre&gt;</description>
            </item>
            
        
            
            <item>
                <title>Middleman Localization</title>
                <link>http://khoapham.me/blog/middleman-localization/</link>
                <pubDate>Wed, 05 Jun 2013 00:00:00 UTC</pubDate>
                <guid>http://khoapham.me/blog/middleman-localization/</guid>
                <description>&lt;p&gt;Recently when developing a site using middleman, my client wonder that if we can do localization for the website. Fortunately, Middleman comes with the localization extension i18n which is pretty simple to integrate it into the site.

Although there&amp;rsquo;s a quick overview of Middleman Localization available on the &lt;a href=&#34;http://middlemanapp.com/&#34; target=&#34;_blank&#34;&gt;middlemanapp.com&lt;/a&gt;, I still find it a little bit confused for Middleman beginners. Here are quick steps how to set it up:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Activate i18n and update your bundle.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To activate, going to your config.rb file, then add at the end of file.
&lt;pre&gt;activate :i18n&lt;/pre&gt;
Open terminal and direct to your middleman app, then run.
&lt;pre&gt;$ bundle update&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Organize your middleman folders so that it knows where translated files located.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All the translated files should be located inside &amp;ldquo;locales&amp;rdquo; folders, in your root directory of your source code. For example, the structure of my directory:
&lt;pre&gt;source
build
config.rb
Gemfile
Gemfile.lock
locales&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Then you need to put all your template files in one folder called localizable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img style=&#34;border: 1px solid #d4d4d4;&#34; alt=&#34;Localizable&#34; src=&#34;http://khoapham.me/img/Localizable-1024x337.png&#34; width=&#34;1024&#34; height=&#34;337&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Add translation text into your translated files:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to your &amp;ldquo;locales&amp;rdquo; folder, and create files called: en.yml, and es.yml, these will include all translation text of English and Spanish for your site.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, in my en.yml file, it contains:
&lt;pre&gt;&amp;mdash;
en:
Â  siteName: &amp;ldquo;Khoa Pham&amp;rdquo;
Â  footer:
Â  Â  privacy: &amp;ldquo;Privacy&amp;rdquo;
Â  Â  legal_disclosure: &amp;ldquo;Legal Disclosure&amp;rdquo;
Â  Â  terms_of_use: &amp;ldquo;Terms of Use&amp;rdquo;
Â  Â  copyright: &amp;ldquo;Copyright&amp;rdquo;&lt;/pre&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In my es.yml, it contains:
&lt;pre&gt;&amp;mdash;
en:
Â  siteName: &amp;ldquo;Khoa Pham&amp;rdquo;
Â  footer:
Â  Â  privacy: &amp;ldquo;Privacidad&amp;rdquo;
Â  Â  legal_disclosure: &amp;ldquo;Aviso legal&amp;rdquo;
Â  Â  terms_of_use: &amp;ldquo;TÃ©rminos de uso&amp;rdquo;
Â  Â  copyright: &amp;ldquo;Copyright&amp;rdquo;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;4. Output translation text to your template files.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Since you already put your template files into the localizable folders, now you can go to files in that folder and output localizable text. My site only has one template file called index.html.erb:&lt;/p&gt;

&lt;p&gt;To output translated text from the translated files, we use: &amp;lt;%= I18n.t(&amp;ldquo;your_key_here&amp;rdquo;) %&amp;gt;. For example,
&lt;pre&gt;&amp;lt;%= I18n.t(&amp;ldquo;siteName&amp;rdquo;) %&amp;gt;
&amp;lt;%= I18n.t(&amp;ldquo;footer.privacy&amp;rdquo;) %&amp;gt;
&amp;lt;%= I18n.t(&amp;ldquo;footer.legal_disclosure&amp;rdquo;) %&amp;gt;
&amp;lt;%= I18n.t(&amp;ldquo;footer.terms_of_use&amp;rdquo;) %&amp;gt;
&amp;lt;%= I18n.t(&amp;ldquo;footer.copyright&amp;rdquo;) %&amp;gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;You can view your site under Spanish by going to: &lt;a href=&#34;http://localhost:4567/es/index.html&#34;&gt;http://localhost:4567/es/index.html&lt;/a&gt;&lt;/p&gt;</description>
            </item>
            
        
            
            <item>
                <title>Sync Middleman with Amazon S3</title>
                <link>http://khoapham.me/blog/sync-middleman-with-amazon-s3/</link>
                <pubDate>Mon, 27 May 2013 22:18:14 -0800</pubDate>
                <guid>http://khoapham.me/blog/sync-middleman-with-amazon-s3/</guid>
                <description>&lt;p&gt;One thing that I love using Middleman and Amazon S3 is that they&amp;rsquo;re a perfect combination for building and hosting a static HTML5 site.&lt;br /&gt;
&lt;/p&gt;

&lt;p&gt;Indeed, using Middleman, you can generate an HTML5 Boilerplate in one command:
&lt;pre&gt;middleman init my_new_boilerplate_project &amp;ndash;template=html5&lt;/pre&gt;
After generate a template, you can start up your development server by using command:
&lt;pre&gt;bundle exec middleman server (or just) middleman server&lt;/pre&gt;
When you finish your site, you can build your site using command:
&lt;pre&gt;bundle exec middleman build&lt;/pre&gt;
Is it better you can sync Middleman with Amazon S3 automatically when you build your site, so that you don&amp;rsquo;t need to use any other FTP clients to upload these files manually? Yes, &lt;a href=&#34;https://github.com/karlfreeman/middleman-sync&#34;&gt;middleman s3_sync&lt;/a&gt; can do it for you:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In your Gemfile, add following lines:&lt;/strong&gt;
  &lt;pre&gt;gem &amp;lsquo;middleman-s3_sync&amp;rsquo;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In your config.rb file, activate your middleman s3 sync&lt;/strong&gt;
&lt;pre&gt;activate :s3_sync do |s3_sync|
  s3_sync.bucket                     = &amp;lsquo;your_s3_bucket_name&amp;rsquo; # The name of the S3 bucket you are targetting. This is globally unique.
  s3_sync.region                     = &amp;lsquo;us-west-2&amp;rsquo;     # The AWS region for your bucket.
  s3_sync.aws_access_key_id          = &amp;lsquo;your_access_key_id&amp;rsquo;
  s3_sync.aws_secret_access_key      = &amp;lsquo;your_secret_access_key&amp;rsquo;
  s3_sync.delete                     = false # We delete stray files by default.
  s3_sync.after_build                = false # We chain after the build step by default. This may not be your desired behavior&amp;hellip;
  s3_sync.prefer_gzip                = true
  s3_sync.path_style                 = true
  s3_sync.reduced_redundancy_storage = false
  s3_sync.acl                        = &amp;lsquo;public-read&amp;rsquo;
  s3_sync.encryption                 = false
end&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Make sure you install all the necessary gems to your app.&lt;/strong&gt;
&lt;pre&gt; bundle install&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;Now you can sync your files to S3 using:
&lt;pre&gt; middleman sync_s3&lt;/pre&gt;&lt;/p&gt;</description>
            </item>
            
        
            
            <item>
                <title>Setting up Amazon Web Services</title>
                <link>http://khoapham.me/blog/setting-up-amazon-web-services/</link>
                <pubDate>Fri, 17 May 2013 23:14:51 -0800</pubDate>
                <guid>http://khoapham.me/blog/setting-up-amazon-web-services/</guid>
                <description>&lt;p&gt;To setting up Amazon Web Services, the process of setting up an EC2 on Amazon Web Services (AWS) is not complicated, all you need to get a server up and running are Apache, PHP,Â  MySQL.
Here are some initial steps that help you get started:
&lt;/p&gt;

&lt;p&gt;###1. SSH connect to you EC2 instance.
To connect to your instance, you need the private key and the elastic IP address that associate with your instance. You can create an associated elastic IP address right in your Amazon Console Management.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -i [FILE NAME].pem ec2-user@[IP ADDRESS]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###2. Once you&amp;rsquo;re connected, install update on your instance.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo yum -y update
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-install-php-amp-its-package&#34;&gt;3. Install PHP &amp;amp; its package.&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;sudo yum install php php-mysql php-xml php-mcrypt php-mbstring php-cli php-devel php-pdo php-pear
sudo pear install Log
sudo yum install -y pcre-devel
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-install-apache-http&#34;&gt;4. Install Apache http.&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;sudo yum install httpd
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;5-install-mysql&#34;&gt;5. Install MySQL&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;sudo yum install mysql-server mysql-devel mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;6-install-php-apc-module&#34;&gt;6. Install PHP APC module&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;sudo yum install php-pecl-apc
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;7-configure-mysql-and-php&#34;&gt;7. Configure MySQL and PHP&lt;/h3&gt;

&lt;p&gt;Â Before you get everything running, make sure to check the PHP and MySQL configuration files.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The PHP configuration file is php.ini, which is located under /etc/php.ini. Open the php.ini and increase memory limit to: 128M (or bigger if you wish to).&lt;/p&gt;

&lt;pre&gt;sudo vim /etc/php.ini
memory_limit = 128M&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The MySQL configuration file is my.cnf located under /etc/my.cnf. Change it to this:&lt;/p&gt;

&lt;pre&gt;[mysqld]
datadir=/var/lib/mysql
socket=/var/lib/mysql/mysql.sock

# Disabling symbolic-links is recommended to prevent assorted security risks
symbolic-links=0
# Settings user and group are ignored when systemd is used.
# If you need to run mysqld under a different user or group,
# customize your systemd unit file for mysqld according to the
# instructions in http://fedoraproject.org/wiki/Systemd
skip-external-locking
long_query_time=1
slow_query_log
slow_query_log_file=/var/log/log-slow-queries.log
log-bin=mysql-bin
server-id= 1
key_buffer_size = 256M
max_allowed_packet = 3M
table_open_cache = 64
read_buffer_size = 4M
read_rnd_buffer_size = 8M
myisam_sort_buffer_size = 16M
thread_cache_size = 8
query_cache_size= 32M
thread_concurrency = 8
[mysqld_safe]
log-error=/var/log/mysqld.log
pid-file=/var/run/mysqld/mysqld.pid
myisam_recover_options&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you have all packages installed, you can start your web server by starting mysql-server and httpd.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo service mysqld start
sudo service httpd start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Auto start mysql server, and httpd.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo /sbin/chkconfig --levels 235 mysqld on
sudo /sbin/chkconfig --levels 235 httpd on
&lt;/code&gt;&lt;/pre&gt;</description>
            </item>
            
        

    </channel>
</rss>
